from pymongo import MongoClient
import pymongo
import bcrypt
from bson import Binary, ObjectId
from django.http import HttpRequest
from datetime import datetime, timezone

# Create a new connection to the polylink database
con = MongoClient("mongodb://localhost:27017")
db = con["polylink"]

# Let's define some utilities functions
def register(firstname, lastname, username, password, profile_bytes, profile_format):
    """ This handles a new user registration. It returns nothing"""
    db.users.insert_one({
        "first_name": firstname,
        "last_name": lastname,
        "username": username,
        "password": bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8"),
        "avatar": Binary(profile_bytes),
        "avatar_format": profile_format,
    })
    return

def login(username, password):
    """ Handles user login. It creates a new session and returns its id if successful or returns None otherwise."""
    user = db.users.find_one({"username": username})
    if user: 
        if bcrypt.checkpw(password.encode("utf-8"), user["password"].encode("utf-8")):  # check if password matches
            # Create a new session
            session = db.sessions.insert_one({})  # generate it first to have a _id generated by MongoDB
            session_id = str(session.inserted_id)
            db.sessions.update_one(             # take that _id, stringuy it and use it as a session_id
                {"_id": session.inserted_id},
                {"$set": {
                    "session_id": session_id,
                    "user_id": user["_id"],
                    }
                },
            )

            return session_id
    return None

def change_password(username, old_password, new_password):
    """ Handles password changes for users. Returns true if succesful, fasle otherwise."""
    user = db.users.find_one({"username": username})
    if user: 
        if bcrypt.checkpw(old_password.encode("utf-8"), user["password"].encode("utf-8")):  # check if password matches
            db.users.update_one(
                {"username": user["username"]}, 
                {
                    "$set": {"password": bcrypt.hashpw(new_password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")}
                }
            )
            return True
    return False

def get_user_by_session_id(session_id):
    """ This retrieve a user from the database using a session id. I returns a dictionny containing information about the user."""
    session = db.sessions.find_one({"session_id": session_id})
    if session:
        user_id = session["user_id"]
        user = db.users.find_one({"_id": user_id})
        return user 
    return None

def get_user(request: HttpRequest):
    """ This retrieve a user from the database using a session id. The retrieve the session id from the receive request object.
        It returns a dictionny containing information about the user. """
    session_id = request.COOKIES.get("session_id", None)
    if not session_id:
        return None
    return get_user_by_session_id(session_id)

def get_user_id_by_session_id(session_id):
    """ This retrieves a user'id from the database using a session id. It returns the id in a string representation """
    user_id = db.sessions.find_one({"session_id": session_id})["user_id"]
    if not user_id:
        return None
    return user_id

def get_user_id(request: HttpRequest):
    """ This retrieve a user from the database using a session id. The retrieve the session id from the receive request object.
    It returns a dictionny containing information about the user. """
    return get_user_id_by_session_id(request.COOKIES.get("session_id", None))


def remove_session(session_id):
    """ Handles sessions deletion. It returns true if succesful"""
    session = db.sessions.delete_one({"session_id": session_id})
    return bool(session)
    
def isUsername(username):
    return bool(db.users.find_one({"username": username}))

##### utily function for testing purpose only
def output_dict(dic):
    print("{")
    for key, value in dic.items():
        print(f"{key}: {value}")
    print("}")


# with open("bg.png", 'rb') as file:
#     img_bytes = file.read()
#     img_format = "png"
#     db.users.update_one({"username": 'matarfaly'}, {'$set': {'avatar': Binary(img_bytes), 'avatar_format': img_format}})

# with open("laye.jpg", 'rb') as file:
#     img_bytes = file.read()
#     img_format = "jpg"
#     db.users.update_one({"username": 'laye'}, {'$set': {'avatar': Binary(img_bytes), 'avatar_format': img_format}})